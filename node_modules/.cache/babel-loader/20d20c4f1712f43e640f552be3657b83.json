{"ast":null,"code":"var _jsxFileName = \"/Users/sean/web/seannimmo.github.io/src/js/Drench.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport '../css/Drench.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Drench = () => {\n  _s();\n\n  const colors = ['#edae49', '#d1495b', '#6cd4ff', '#c2eabd', '#44355b', '#ffcaaf']; // const squares = [...Array(14)].map(i => Array(14));\n\n  const squares = Array(14);\n  let counter = 0;\n\n  for (let i = 0; i < 14; i++) {\n    squares[i] = [];\n\n    for (let j = 0; j < 14; j++) {\n      let id = counter++;\n      let color = getRandomColor(colors);\n      let newSquare = {\n        row: i,\n        col: j,\n        id: id,\n        drenched: false,\n        color: color\n      };\n      squares[i].push(newSquare);\n    }\n  }\n\n  squares[0][0].drenched = true;\n  const [squareBoard, setSquareBoard] = useState(squares);\n  const [getClickCounter, setClickCounter] = useState(30);\n\n  const handleClick = newColor => {\n    //map returns a new array. you can spread objects?\n    //you can't just change one element. you must create a new array.\n    setClickCounter(getClickCounter - 1);\n    const drenchedSquaresColored = squareBoard.map(row => {\n      return row.map(square => {\n        if (square.drenched) {\n          return { ...square,\n            color: newColor\n          };\n        } else {\n          return square;\n        }\n      });\n    }); //handleDrench. Must do map twice. Once to change color of drenched. Then, to search for new squares to drench.\n    //inspect array and search for indices of tiles to drench. Then loop through state and change those tiles? \n\n    const arrayOfIdsToDrench = bfs(drenchedSquaresColored, newColor);\n    const drenchedState = drenchSquares(drenchedSquaresColored, arrayOfIdsToDrench);\n    setSquareBoard(drenchedState); //win state\n\n    if (getWinState(squareBoard, newColor)) {\n      setClickCounter(\"You Win!\");\n    }\n  };\n\n  const bfs = (squares, newColor) => {\n    const arrayOfIds = [];\n    const queue = []; //add all drenched squares to queue\n\n    for (let i = 0; i < squares.length; i++) {\n      for (let j = 0; j < squares[0].length; j++) {\n        if (squares[i][j].drenched === true) {\n          queue.push(squares[i][j]);\n        }\n      }\n    }\n\n    while (queue.length > 0) {\n      const discoveredSquare = queue.shift();\n      const colOfSquare = discoveredSquare.col;\n      const rowOfSquare = discoveredSquare.row;\n      investigateHorizontal(discoveredSquare, colOfSquare, rowOfSquare, 1, squares, newColor, queue, arrayOfIds);\n      investigateHorizontal(discoveredSquare, colOfSquare, rowOfSquare, -1, squares, newColor, queue, arrayOfIds);\n      investigateVertical(discoveredSquare, colOfSquare, rowOfSquare, 1, squares, newColor, queue, arrayOfIds);\n      investigateVertical(discoveredSquare, colOfSquare, rowOfSquare, -1, squares, newColor, queue, arrayOfIds);\n    }\n\n    return arrayOfIds;\n  };\n\n  const investigateHorizontal = (discoveredSquare, colOfSquare, rowOfSquare, j, squares, newColor, queue, arrayOfIds) => {\n    if (0 <= colOfSquare + j && colOfSquare + j <= 13) {\n      const squareToInvestigate = squares[rowOfSquare][colOfSquare + j];\n\n      if (squareToInvestigate.color === newColor && !queue.includes(squareToInvestigate) && !squareToInvestigate.drenched && !arrayOfIds.includes(squareToInvestigate)) {\n        queue.push(squareToInvestigate);\n        arrayOfIds.push(squareToInvestigate);\n      }\n    }\n  };\n\n  const investigateVertical = (discoveredSquare, colOfSquare, rowOfSquare, i, squares, newColor, queue, arrayOfIds) => {\n    if (0 <= rowOfSquare + i && rowOfSquare + i <= 13) {\n      const squareToInvestigate = squares[rowOfSquare + i][colOfSquare];\n\n      if (squareToInvestigate.color === newColor && !queue.includes(squareToInvestigate) && !squareToInvestigate.drenched && !arrayOfIds.includes(squareToInvestigate)) {\n        queue.push(squareToInvestigate);\n        arrayOfIds.push(squareToInvestigate);\n      }\n    }\n  };\n\n  const drenchSquares = (squares, arrayOfIdsToDrench) => {\n    const newState = squares.map(row => {\n      return row.map(square => {\n        if (arrayOfIdsToDrench.includes(square)) {\n          return { ...square,\n            drenched: true\n          };\n        } else {\n          return square;\n        }\n      });\n    });\n    return newState;\n  };\n\n  const getWinState = (squareBoard, newColor) => {\n    let hasWon = true;\n    squareBoard.forEach(row => {\n      row.forEach(square => {\n        if (newColor !== square.color) {\n          hasWon = false;\n        }\n      });\n    });\n    console.log(squareBoard);\n    console.log(hasWon, newColor);\n    return hasWon;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-board\",\n    children: [/*#__PURE__*/_jsxDEV(Board, {\n      squares: squareBoard\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Palette, {\n      handleClick: handleClick,\n      colors: colors\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ClickCounter, {\n      getClickCounter: getClickCounter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Drench, \"QkUBryTolb2wf/4zrqd0obKvVEs=\");\n\n_c = Drench;\n\nconst Board = _ref => {\n  let {\n    squares\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    children: squares.map(array => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: array.map(square => {\n          return /*#__PURE__*/_jsxDEV(Square, {\n            square: square\n          }, square.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 32\n          }, this);\n        })\n      }, array[0].row, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 24\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 141,\n    columnNumber: 9\n  }, this);\n};\n\n_c2 = Board;\n\nconst Palette = _ref2 => {\n  let {\n    handleClick,\n    colors\n  } = _ref2;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"palette\",\n    children: colors.map(color => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => {\n          handleClick(color);\n        },\n        style: {\n          background: color\n        },\n        className: \"palette-color\"\n      }, color, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 24\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 155,\n    columnNumber: 9\n  }, this);\n};\n\n_c3 = Palette;\n\nconst Square = props => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"square\",\n    style: {\n      background: props.square.color\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 167,\n    columnNumber: 9\n  }, this);\n};\n\n_c4 = Square;\n\nconst ClickCounter = _ref3 => {\n  let {\n    getClickCounter\n  } = _ref3;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"click-counter\",\n    children: getClickCounter\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 173,\n    columnNumber: 9\n  }, this);\n};\n\n_c5 = ClickCounter;\n\nconst getRandomColor = colors => {\n  let number = Math.floor(Math.random() * 6);\n  return colors[number];\n};\n\nexport default Drench;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"Drench\");\n$RefreshReg$(_c2, \"Board\");\n$RefreshReg$(_c3, \"Palette\");\n$RefreshReg$(_c4, \"Square\");\n$RefreshReg$(_c5, \"ClickCounter\");","map":{"version":3,"names":["React","useState","Drench","colors","squares","Array","counter","i","j","id","color","getRandomColor","newSquare","row","col","drenched","push","squareBoard","setSquareBoard","getClickCounter","setClickCounter","handleClick","newColor","drenchedSquaresColored","map","square","arrayOfIdsToDrench","bfs","drenchedState","drenchSquares","getWinState","arrayOfIds","queue","length","discoveredSquare","shift","colOfSquare","rowOfSquare","investigateHorizontal","investigateVertical","squareToInvestigate","includes","newState","hasWon","forEach","console","log","Board","array","Palette","background","Square","props","ClickCounter","number","Math","floor","random"],"sources":["/Users/sean/web/seannimmo.github.io/src/js/Drench.js"],"sourcesContent":["import React, {useState} from 'react';\nimport '../css/Drench.css';\n\n\n\nconst Drench = () => {\n    const colors = ['#edae49', '#d1495b', '#6cd4ff', '#c2eabd', '#44355b', '#ffcaaf'];\n   // const squares = [...Array(14)].map(i => Array(14));\n   const squares = Array(14);\n   let counter = 0;\n   for(let i=0; i<14;i++){\n        squares[i] = [];\n        for(let j=0; j<14;j++){\n            let id = counter++;\n            let color = getRandomColor(colors);\n            let newSquare = {\n                row: i,\n                col: j,\n                id: id,\n                drenched: false,\n                color: color\n            }\n            squares[i].push(newSquare);\n        }\n    }\n\n    squares[0][0].drenched = true;\n    const [squareBoard, setSquareBoard] = useState(squares);\n    const [getClickCounter, setClickCounter] = useState(30);\n\n    const handleClick = newColor => {\n        //map returns a new array. you can spread objects?\n        //you can't just change one element. you must create a new array.\n\n        setClickCounter(getClickCounter - 1);\n        const drenchedSquaresColored = squareBoard.map(row => {\n            return row.map((square) => {\n                if(square.drenched){\n                    return {...square, color: newColor}\n                } else {\n                    return square\n                }\n            })\n        })\n\n        //handleDrench. Must do map twice. Once to change color of drenched. Then, to search for new squares to drench.\n        //inspect array and search for indices of tiles to drench. Then loop through state and change those tiles? \n        const arrayOfIdsToDrench = bfs(drenchedSquaresColored, newColor);\n        const drenchedState = drenchSquares(drenchedSquaresColored, arrayOfIdsToDrench)\n        setSquareBoard(drenchedState);\n\n        //win state\n        if(getWinState(squareBoard, newColor)){\n            setClickCounter(\"You Win!\");\n        }\n    }\n\n    const bfs = (squares, newColor) => {\n        const arrayOfIds = [];\n        const queue = [];\n        //add all drenched squares to queue\n        for(let i=0; i<squares.length; i++){\n            for(let j=0; j<squares[0].length; j++){\n                if(squares[i][j].drenched === true){\n                    queue.push(squares[i][j]);\n                }\n            }\n        }\n        while(queue.length > 0){\n            const discoveredSquare = queue.shift();\n            const colOfSquare = discoveredSquare.col;\n            const rowOfSquare = discoveredSquare.row;\n            investigateHorizontal(discoveredSquare, colOfSquare, rowOfSquare, 1, squares, newColor, queue, arrayOfIds)\n            investigateHorizontal(discoveredSquare, colOfSquare, rowOfSquare, -1, squares, newColor, queue, arrayOfIds)\n            investigateVertical(discoveredSquare, colOfSquare, rowOfSquare, 1, squares, newColor, queue, arrayOfIds)\n            investigateVertical(discoveredSquare, colOfSquare, rowOfSquare, -1, squares, newColor, queue, arrayOfIds)\n        }\n        return arrayOfIds;\n    }\n\n\n    const investigateHorizontal = (discoveredSquare, colOfSquare, rowOfSquare, j, squares, newColor, queue, arrayOfIds) => {\n        if(0 <= (colOfSquare + j) && (colOfSquare + j) <= 13) {\n            const squareToInvestigate = squares[rowOfSquare][colOfSquare + j];\n            if((squareToInvestigate.color === newColor) && (!queue.includes(squareToInvestigate)) && !squareToInvestigate.drenched && !arrayOfIds.includes(squareToInvestigate)){\n                queue.push(squareToInvestigate);\n                arrayOfIds.push(squareToInvestigate);\n            }\n        }\n    }\n\n    const investigateVertical = (discoveredSquare, colOfSquare, rowOfSquare, i, squares, newColor, queue, arrayOfIds) => {\n        if(0 <= (rowOfSquare + i) && (rowOfSquare + i) <= 13) {\n            const squareToInvestigate = squares[rowOfSquare + i][colOfSquare];\n            if(squareToInvestigate.color === newColor && (!queue.includes(squareToInvestigate)) && !squareToInvestigate.drenched && !arrayOfIds.includes(squareToInvestigate)){\n                queue.push(squareToInvestigate);\n                arrayOfIds.push(squareToInvestigate);\n            }\n        }\n    }\n\n    const drenchSquares = (squares, arrayOfIdsToDrench) => {\n        const newState = squares.map(row => {\n            return row.map((square) => {\n                if(arrayOfIdsToDrench.includes(square)) {\n                    return {...square, drenched: true}\n                } else {\n                    return square\n                }\n            })\n        })\n        return newState;\n    }\n\n    const getWinState = (squareBoard, newColor) => {\n        let hasWon = true;\n        squareBoard.forEach(row => {\n            row.forEach(square => {\n                if(newColor !== square.color){\n                    hasWon = false;\n                }\n            })\n        })\n        console.log(squareBoard)\n        console.log(hasWon, newColor);\n        return hasWon;\n    }\n\n    return (\n        <div className = 'game-board'>\n            {/* the prop to pass down is the state */}\n            <Board squares={squareBoard}/>\n            <Palette handleClick={handleClick} colors={colors} />\n            <ClickCounter getClickCounter={getClickCounter} />\n        </div>\n    )\n}\n\nconst Board = ({squares}) => {\n    return (\n        <div className='board'> \n            {squares.map(array => {\n                return <div key={array[0].row} className=\"row\">\n                    {array.map(square => {\n                        return <Square key={square.id} square={square} />\n                    })}\n                </div>\n            })}\n        </div>\n    )\n}\n\nconst Palette = ({handleClick, colors}) => {\n    return (\n        <div className='palette'>\n        {\n            colors.map(color => {\n                return <div key={color} onClick={() => {handleClick(color)}} style={{background: color}} className='palette-color'></div>\n            })\n        }\n        </div>\n    )\n}\n\nconst Square = (props) => {\n    return(\n        <div className='square' style={{background: props.square.color}}></div>\n    )\n}\n\nconst ClickCounter = ({getClickCounter}) => {\n    return (\n        <div className='click-counter'>{getClickCounter}</div>\n    )\n}\n\nconst getRandomColor = (colors) => {\n    let number = Math.floor(Math.random() * 6);\n    return colors[number];\n\n}\n\nexport default Drench"],"mappings":"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"},"metadata":{},"sourceType":"module"}