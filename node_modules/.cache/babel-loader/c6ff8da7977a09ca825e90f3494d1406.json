{"ast":null,"code":"var _jsxFileName = \"/Users/sean/web/website-portfolio/src/js/Wordle.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport \"../css/Wordle.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst words = [\"people\", \"should\", \"before\", \"little\", \"number\", \"course\", \"really\", \"always\", \"within\", \"around\", \"system\", \"though\", \"rather\", \"things\", \"during\", \"second\"];\nconst randomNum = Math.floor(Math.random() * words.length);\nconst chosenWordString = words[randomNum];\nconst chosenWordArray = chosenWordString.split(\"\");\n\nconst Wordle = () => {\n  _s();\n\n  const wordLength = chosenWordString.length;\n  const board = Array(wordLength);\n\n  for (let i = 0; i < board.length; i++) {\n    board[i] = [];\n\n    for (let j = 0; j < wordLength; j++) {\n      board[i][j] = {\n        char: \"\",\n        color: \"white\"\n      };\n    }\n  }\n\n  const [hasWon, changeHasWon] = useState(false);\n  const [boardState, changeBoardState] = useState(board);\n  const [currentRow, changeCurrentRow] = useState(0);\n  const [currentSquare, changeCurrentSquare] = useState(0);\n\n  const keyPressed = e => {\n    console.log(e); // TODO: Row safety!!\n    // Rules for rows: \n    //Can only add char if there is space on row.\n    //can only backspace if there is at least one char on row.\n    //to go to next row, press enter\n    //can only press enter if row is full. \n\n    if (65 <= e.keyCode && e.keyCode <= 90 && currentSquare <= wordLength - 1) {\n      addNextChar(e.key);\n      changeCurrentSquare(currentSquare + 1);\n    } else if (e.key === \"Backspace\" && currentSquare > 0) {\n      removeLastChar();\n      changeCurrentSquare(currentSquare - 1);\n    } else if (e.key === \"Enter\" && currentSquare == 6) {\n      checkGuess();\n    }\n\n    console.log(boardState);\n  };\n\n  const addNextChar = char => {\n    let firstEmpty = true;\n    const nextState = boardState.map(row => {\n      return row.map(square => {\n        if (square.char === \"\" && firstEmpty == true) {\n          firstEmpty = false;\n          return { ...square,\n            char: char.toUpperCase()\n          };\n        } else {\n          return square;\n        }\n      });\n    });\n    changeBoardState(nextState);\n  };\n\n  const removeLastChar = () => {\n    const nextState = boardState.map((row, row_index) => {\n      return row.map((square, square_index) => {\n        if (row_index == currentRow && square_index == currentSquare - 1) {\n          return { ...square,\n            char: \"\"\n          };\n        } else {\n          return square;\n        }\n      });\n    });\n    changeBoardState(nextState);\n  };\n\n  const checkGuess = () => {\n    const guessArray = boardState[currentRow].map(square => {\n      return square.char;\n    });\n    const guessString = guessArray.join(\"\");\n\n    if (guessString === chosenWordString) {\n      changeHasWon(true);\n    }\n\n    changeCurrentRow(currentRow + 1);\n    changeCurrentSquare(0);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"wordle-board\",\n    tabIndex: -1,\n    onKeyDown: keyPressed,\n    children: [boardState.map((row, index) => {\n      return /*#__PURE__*/_jsxDEV(Row, {\n        row: row\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 20\n      }, this);\n    }), hasWon && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \" You win! \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 23\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Wordle, \"01oaGvS78nz+OKbGaJpZHsPzcWg=\");\n\n_c = Wordle;\n\nconst Row = _ref => {\n  let {\n    row\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"wordle-row\",\n    children: row.map((square, index) => {\n      return /*#__PURE__*/_jsxDEV(Square, {\n        square: square\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 24\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 9\n  }, this);\n};\n\n_c2 = Row;\n\nconst Square = _ref2 => {\n  let {\n    square\n  } = _ref2;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"wordle-square\",\n    style: {\n      background: \"red\"\n    },\n    children: square.char\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 9\n  }, this);\n};\n\n_c3 = Square;\nexport default Wordle;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Wordle\");\n$RefreshReg$(_c2, \"Row\");\n$RefreshReg$(_c3, \"Square\");","map":{"version":3,"names":["React","useEffect","useState","words","randomNum","Math","floor","random","length","chosenWordString","chosenWordArray","split","Wordle","wordLength","board","Array","i","j","char","color","hasWon","changeHasWon","boardState","changeBoardState","currentRow","changeCurrentRow","currentSquare","changeCurrentSquare","keyPressed","e","console","log","keyCode","addNextChar","key","removeLastChar","checkGuess","firstEmpty","nextState","map","row","square","toUpperCase","row_index","square_index","guessArray","guessString","join","index","Row","Square","background"],"sources":["/Users/sean/web/website-portfolio/src/js/Wordle.js"],"sourcesContent":["import React, {useEffect, useState} from 'react';\nimport \"../css/Wordle.css\";\nconst words = [\n    \"people\",\n    \"should\",\n    \"before\",\n    \"little\",\n    \"number\",\n    \"course\",\n    \"really\",\n    \"always\",\n    \"within\",\n    \"around\",\n    \"system\",\n    \"though\",\n    \"rather\",\n    \"things\",\n    \"during\",\n    \"second\"\n]\n\nconst randomNum = Math.floor(Math.random() * words.length);\nconst chosenWordString = words[randomNum];\nconst chosenWordArray = chosenWordString.split(\"\");\n\nconst Wordle = () => {\n    const wordLength = chosenWordString.length;\n    const board = Array(wordLength);\n    for(let i=0; i<board.length; i++){\n        board[i] = [];\n        for(let j=0; j<wordLength; j++){\n            board[i][j] = {\n                char: \"\",\n                color: \"white\",\n            };\n        }\n    }\n\n    const [hasWon, changeHasWon] = useState(false);\n    const [boardState, changeBoardState] = useState(board);\n    const [currentRow, changeCurrentRow] = useState(0);\n    const [currentSquare, changeCurrentSquare] = useState(0);\n    \n    const keyPressed = (e) => {\n        console.log(e);\n        // TODO: Row safety!!\n        // Rules for rows: \n        //Can only add char if there is space on row.\n        //can only backspace if there is at least one char on row.\n        //to go to next row, press enter\n        //can only press enter if row is full. \n\n        if(65 <= e.keyCode && e.keyCode <= 90 && currentSquare <= wordLength - 1){\n            addNextChar(e.key)\n            changeCurrentSquare(currentSquare + 1);\n        } else if(e.key === \"Backspace\" && currentSquare > 0){\n            removeLastChar()\n            changeCurrentSquare(currentSquare - 1);\n        } else if(e.key === \"Enter\" && currentSquare == 6){\n            checkGuess();\n        }\n        console.log(boardState)\n    }\n\n    const addNextChar = (char) => {\n        let firstEmpty = true;\n        const nextState = boardState.map(row => {\n            return row.map(square => {\n                if(square.char === \"\" && firstEmpty == true){\n                    firstEmpty = false;\n                    return {...square, char: char.toUpperCase()};\n                }\n                else {\n                    return square;\n                }\n            })\n        })\n        changeBoardState(nextState);\n    }\n\n    const removeLastChar = () => {\n        const nextState = boardState.map((row, row_index) => {\n            return row.map((square, square_index) => {\n                if(row_index == currentRow && (square_index == currentSquare - 1)){\n                    return {...square, char: \"\"};\n                }\n                else {\n                    return square;\n                }\n            })\n        })\n        changeBoardState(nextState);\n    }\n\n    const checkGuess = () => {\n        const guessArray = (boardState[currentRow]).map(square => {\n            return square.char;\n        });\n        const guessString = guessArray.join(\"\");\n\n\n        if(guessString === chosenWordString){\n            changeHasWon(true);\n        }\n\n        changeCurrentRow(currentRow + 1);\n        changeCurrentSquare(0);\n    }\n\n    return (\n        <div className=\"wordle-board\" tabIndex={-1} onKeyDown={keyPressed} >\n           {boardState.map((row, index) => {\n            return <Row row={row} key={index}/>\n           })}\n           {/* Javascript evaluates next statement as true, so it includes it.  TRUE && TRUE */}\n           {hasWon && <div> You win! </div>}\n\n        </div>\n\n    )\n}\nconst Row = ({row}) => {\n    return (\n        <div className=\"wordle-row\" > \n            {row.map((square, index) => {\n                return <Square square={square} key={index} />\n                })\n            }\n        </div>\n    )\n}\n\nconst Square = ({square}) => {\n\n    return (\n        <div className= \"wordle-square\" style={{background: \"red\"}}> \n            {square.char}\n        </div>\n    )\n}\n\n\nexport default Wordle;"],"mappings":"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"},"metadata":{},"sourceType":"module"}