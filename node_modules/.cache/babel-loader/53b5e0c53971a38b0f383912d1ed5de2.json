{"ast":null,"code":"import _objectSpread from\"/Users/sean/web/seannimmo.github.io/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _slicedToArray from\"/Users/sean/web/seannimmo.github.io/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useState}from'react';import\"../css/Wordle.css\";import words from\"./SixLetterWords.js\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var randomNum=Math.floor(Math.random()*words.length);var chosenWordString=words[randomNum].toUpperCase();var chosenWordArray=chosenWordString.split(\"\");var Wordle=function Wordle(){var wordLength=chosenWordString.length;var board=Array(wordLength);for(var i=0;i<board.length;i++){board[i]=[];for(var j=0;j<wordLength;j++){board[i][j]={char:\"\",color:\"white\"};}}var _useState=useState(false),_useState2=_slicedToArray(_useState,2),hasWon=_useState2[0],changeHasWon=_useState2[1];var _useState3=useState(board),_useState4=_slicedToArray(_useState3,2),boardState=_useState4[0],changeBoardState=_useState4[1];var _useState5=useState(0),_useState6=_slicedToArray(_useState5,2),currentRow=_useState6[0],changeCurrentRow=_useState6[1];var _useState7=useState(0),_useState8=_slicedToArray(_useState7,2),currentSquare=_useState8[0],changeCurrentSquare=_useState8[1];var keyPressed=function keyPressed(e){// TODO: Correct number of yellows. Check if guess in wordlist. Lose condition. Keyboard that shows guessed letters. \n// Rules for rows: \n//Can only add char if there is space on row.\n//can only backspace if there is at least one char on row.\n//to go to next row, press enter\n//can only press enter if row is full. \nif(65<=e.keyCode&&e.keyCode<=90&&currentSquare<=wordLength-1){addNextChar(e.key);changeCurrentSquare(currentSquare+1);}else if(e.key===\"Backspace\"&&currentSquare>0){removeLastChar();changeCurrentSquare(currentSquare-1);}else if(e.key===\"Enter\"&&currentSquare===6){checkGuess();}};var addNextChar=function addNextChar(char){var firstEmpty=true;var nextState=boardState.map(function(row){return row.map(function(square){if(square.char===\"\"&&firstEmpty===true){firstEmpty=false;return _objectSpread(_objectSpread({},square),{},{char:char.toUpperCase()});}else{return square;}});});changeBoardState(nextState);};var removeLastChar=function removeLastChar(){var nextState=boardState.map(function(row,row_index){return row.map(function(square,square_index){if(row_index===currentRow&&square_index===currentSquare-1){return _objectSpread(_objectSpread({},square),{},{char:\"\"});}else{return square;}});});changeBoardState(nextState);};var checkGuess=function checkGuess(){//Rules: If letter is in correct place, turn green\nvar guessArray=boardState[currentRow].map(function(square){return square.char;});var guessString=guessArray.join(\"\");console.log(guessString);console.log(chosenWordString);console.log(guessArray);console.log(chosenWordArray);var newArray=boardState[currentRow].map(function(square,index){if(square.char===chosenWordArray[index]){return _objectSpread(_objectSpread({},square),{},{color:\"green\"});}else if(chosenWordArray.includes(guessArray[index])){return _objectSpread(_objectSpread({},square),{},{color:\"yellow\"});}else{return square;}});var newBoardState=boardState.map(function(row,index){if(index===currentRow){return newArray;}else{return row;}});if(guessString===chosenWordString){changeHasWon(true);}changeBoardState(newBoardState);changeCurrentRow(currentRow+1);changeCurrentSquare(0);};return/*#__PURE__*/_jsxs(\"div\",{className:\"wordle-board\",tabIndex:-1,onKeyDown:keyPressed,children:[boardState.map(function(row,index){return/*#__PURE__*/_jsx(Row,{row:row},index);}),hasWon&&/*#__PURE__*/_jsx(\"div\",{children:\" You win! \"})]});};var Row=function Row(_ref){var row=_ref.row;return/*#__PURE__*/_jsx(\"div\",{className:\"wordle-row\",children:row.map(function(square,index){return/*#__PURE__*/_jsx(Square,{square:square},index);})});};var Square=function Square(_ref2){var square=_ref2.square;return/*#__PURE__*/_jsx(\"div\",{className:\"wordle-square\",style:{background:square.color},children:square.char});};export default Wordle;","map":{"version":3,"names":["React","useState","words","randomNum","Math","floor","random","length","chosenWordString","toUpperCase","chosenWordArray","split","Wordle","wordLength","board","Array","i","j","char","color","hasWon","changeHasWon","boardState","changeBoardState","currentRow","changeCurrentRow","currentSquare","changeCurrentSquare","keyPressed","e","keyCode","addNextChar","key","removeLastChar","checkGuess","firstEmpty","nextState","map","row","square","row_index","square_index","guessArray","guessString","join","console","log","newArray","index","includes","newBoardState","Row","Square","background"],"sources":["/Users/sean/web/seannimmo.github.io/src/js/Wordle.js"],"sourcesContent":["import React, {useState} from 'react';\nimport \"../css/Wordle.css\";\nimport words from \"./SixLetterWords.js\"\n\nconst randomNum = Math.floor(Math.random() * words.length);\nconst chosenWordString = words[randomNum].toUpperCase();\nconst chosenWordArray = chosenWordString.split(\"\");\n\nconst Wordle = () => {\n    const wordLength = chosenWordString.length;\n    const board = Array(wordLength);\n    for(let i=0; i<board.length; i++){\n        board[i] = [];\n        for(let j=0; j<wordLength; j++){\n            board[i][j] = {\n                char: \"\",\n                color: \"white\",\n            };\n        }\n    }\n\n    const [hasWon, changeHasWon] = useState(false);\n    const [boardState, changeBoardState] = useState(board);\n    const [currentRow, changeCurrentRow] = useState(0);\n    const [currentSquare, changeCurrentSquare] = useState(0);\n    \n    const keyPressed = (e) => {\n        // TODO: Correct number of yellows. Check if guess in wordlist. Lose condition. Keyboard that shows guessed letters. \n        // Rules for rows: \n        //Can only add char if there is space on row.\n        //can only backspace if there is at least one char on row.\n        //to go to next row, press enter\n        //can only press enter if row is full. \n\n        if(65 <= e.keyCode && e.keyCode <= 90 && currentSquare <= wordLength - 1){\n            addNextChar(e.key)\n            changeCurrentSquare(currentSquare + 1);\n        } else if(e.key === \"Backspace\" && currentSquare > 0){\n            removeLastChar()\n            changeCurrentSquare(currentSquare - 1);\n        } else if(e.key === \"Enter\" && currentSquare === 6){\n            checkGuess();\n        }\n    }\n\n    const addNextChar = (char) => {\n        let firstEmpty = true;\n        const nextState = boardState.map(row => {\n            return row.map(square => {\n                if(square.char === \"\" && firstEmpty === true){\n                    firstEmpty = false;\n                    return {...square, char: char.toUpperCase()};\n                }\n                else {\n                    return square;\n                }\n            })\n        })\n        changeBoardState(nextState);\n    }\n\n    const removeLastChar = () => {\n        const nextState = boardState.map((row, row_index) => {\n            return row.map((square, square_index) => {\n                if(row_index === currentRow && (square_index === currentSquare - 1)){\n                    return {...square, char: \"\"};\n                }\n                else {\n                    return square;\n                }\n            })\n        })\n        changeBoardState(nextState);\n    }\n\n    const checkGuess = () => {\n        //Rules: If letter is in correct place, turn green\n        const guessArray = (boardState[currentRow]).map(square => {\n            return square.char;\n        });\n        const guessString = guessArray.join(\"\");\n        console.log(guessString);\n        console.log(chosenWordString);\n        console.log(guessArray);\n        console.log(chosenWordArray);\n        const newArray = boardState[currentRow].map((square, index) => {\n            if(square.char === chosenWordArray[index]){\n                return {...square, color: \"green\"};\n            } else if(chosenWordArray.includes(guessArray[index])) {\n                return {...square, color: \"yellow\"}; \n            } else {\n                return square;\n            }\n        })\n\n        const newBoardState = boardState.map((row, index) => {\n            if(index === currentRow){\n                return newArray;\n            } else{\n                return row;\n            }\n        })\n        if(guessString === chosenWordString){\n            changeHasWon(true);\n        }\n\n        changeBoardState(newBoardState);\n        changeCurrentRow(currentRow + 1);\n        changeCurrentSquare(0);\n    }\n\n    return (\n        <div className=\"wordle-board\" tabIndex={-1} onKeyDown={keyPressed} >\n           {boardState.map((row, index) => {\n            return <Row row={row} key={index}/>\n           })}\n           {/* Javascript evaluates next statement as true, so it includes it.  TRUE && TRUE */}\n           {hasWon && <div> You win! </div>}\n\n        </div>\n\n    )\n}\nconst Row = ({row}) => {\n    return (\n        <div className=\"wordle-row\" > \n            {row.map((square, index) => {\n                return <Square square={square} key={index} />\n                })\n            }\n        </div>\n    )\n}\n\nconst Square = ({square}) => {\n\n    return (\n        <div className= \"wordle-square\" style={{background: square.color}}> \n            {square.char}\n        </div>\n    )\n}\n\n\nexport default Wordle;"],"mappings":"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"},"metadata":{},"sourceType":"module"}